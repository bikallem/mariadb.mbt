// Generated using `moon info`, DON'T EDIT IT
package "bikallem/mariadb/mariadb_stmt"

import(
  "bikallem/mariadb"
)

// Values

// Errors
pub suberror StmtError (String, UInt, String, SourceLoc)
fn StmtError::output(Self, &Logger) -> Unit // from trait `Show`
fn StmtError::to_string(Self) -> String // from trait `Show`
impl Show for StmtError

// Types and methods
pub(all) enum ParamType {
  Int
  UInt
  Int64
  UInt64
  Float
  Double
  String(UInt)
  Blob(UInt)
  Bool
}

type Stmt
fn Stmt::close(Self) -> Unit
fn Stmt::execute(Self, param_values? : Map[Int, &ParamValue], result_column_types? : Array[ParamType]) -> StmtResult raise
fn Stmt::new(@mariadb.MySql, String, param_types? : Array[ParamType]) -> Self raise

pub(all) enum StmtFetchResult {
  Data(StmtResultRow)
  NoData
}

type StmtResult
fn StmtResult::affected_rows(Self) -> UInt64
fn StmtResult::fetch(Self) -> Result[StmtFetchResult, StmtError]
fn StmtResult::iter(Self) -> Iter[Result[StmtResultRow, StmtError]]

type StmtResultRow
fn[T : Column] StmtResultRow::get(Self, Int) -> T?
#alias("_[_]")
fn[T : Column] StmtResultRow::unsafe_get(Self, Int) -> T

// Type aliases

// Traits
pub trait Column {
  to(Bytes) -> Self
}
impl Column for Bool
impl Column for Int
impl Column for Int64
impl Column for UInt
impl Column for Float
impl Column for Double
impl Column for String
impl Column for Bytes

pub trait ParamValue {
  set_value(Self, Stmt, Int) -> Unit
}
impl ParamValue for Bool
impl ParamValue for Int
impl ParamValue for Int64
impl ParamValue for UInt
impl ParamValue for UInt64
impl ParamValue for Float
impl ParamValue for Double
impl ParamValue for String
impl ParamValue for Bytes

