// Generated using `moon info`, DON'T EDIT IT
package "bikallem/mariadb/mariadb_stmt"

import(
  "bikallem/mariadb"
)

// Values

// Errors
pub suberror MySqlStmtError (String, UInt, String, SourceLoc)
impl Show for MySqlStmtError

// Types and methods
pub(all) enum MySqlStmtFetchResult {
  Data(MySqlStmtResultRow)
  NoData
}

type MySqlStmtResult
fn MySqlStmtResult::affected_rows(Self) -> UInt64
fn MySqlStmtResult::fetch(Self) -> Result[MySqlStmtFetchResult, MySqlStmtError]
fn MySqlStmtResult::iter(Self) -> Iter[Result[MySqlStmtResultRow, MySqlStmtError]]

type MySqlStmtResultRow
fn[T : Column] MySqlStmtResultRow::get(Self, Int) -> T?
fn[T : Column] MySqlStmtResultRow::op_get(Self, Int) -> T

pub(all) enum ParamType {
  Int
  UInt
  Int64
  UInt64
  Float
  Double
  String(UInt)
  Blob(UInt)
  Bool
}

type Stmt
fn Stmt::close(Self) -> Unit
fn Stmt::execute(Self, param_values? : Map[Int, &ParamValue], result_column_types? : Array[ParamType]) -> MySqlStmtResult raise
fn Stmt::new(@mariadb.MySql, String, param_types? : Array[ParamType]) -> Self raise

// Type aliases

// Traits
trait Column
impl Column for Bool
impl Column for Int
impl Column for Int64
impl Column for UInt
impl Column for Float
impl Column for Double
impl Column for String
impl Column for Bytes

trait ParamValue
impl ParamValue for Bool
impl ParamValue for Int
impl ParamValue for Int64
impl ParamValue for UInt
impl ParamValue for UInt64
impl ParamValue for Float
impl ParamValue for Double
impl ParamValue for String
impl ParamValue for Bytes

