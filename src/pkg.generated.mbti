// Generated using `moon info`, DON'T EDIT IT
package "bikallem/mariadb"

// Values
fn connect_via_tcp_socket(host~ : String, port~ : UInt, user~ : String, password~ : String, database~ : String, client_flag? : UInt) -> MySql raise

fn connect_via_unix_socket(unix_socket~ : String, user~ : String, password~ : String, database~ : String, client_flag? : UInt) -> MySql raise

// Errors
pub suberror Err (String, UInt, String, SourceLoc)
fn Err::output(Self, &Logger) -> Unit // from trait `Show`
fn Err::to_string(Self) -> String // from trait `Show`
impl Show for Err

// Types and methods
type MySql
fn MySql::affected_rows(Self) -> UInt
fn MySql::execute(Self, String) -> MySqlRes raise
#callsite(autofill(loc))
fn[T] MySql::fail(Self, String, loc~ : SourceLoc) -> T raise
fn MySql::real_escape_string(Self, String) -> String
fn MySql::set_character_set(Self, Bytes) -> Int

type MySqlRes
fn MySqlRes::fetch_row(Self) -> MySqlRow?
fn MySqlRes::iter(Self) -> Iter[MySqlRow]
fn MySqlRes::num_fields(Self) -> UInt

type MySqlRow
fn[T : ColumnValue] MySqlRow::get(Self, Int) -> T?
#alias("_[_]")
fn[T : ColumnValue] MySqlRow::unsafe_get(Self, Int) -> T raise

// Type aliases

// Traits
pub trait ColumnValue {
  to(Bytes) -> Self raise
}
impl ColumnValue for Bool
impl ColumnValue for Int
impl ColumnValue for Int64
impl ColumnValue for UInt
impl ColumnValue for Float
impl ColumnValue for Double
impl ColumnValue for String
impl ColumnValue for Bytes

