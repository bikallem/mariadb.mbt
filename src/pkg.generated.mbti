// Generated using `moon info`, DON'T EDIT IT
package "bikallem/mariadb"

// Values
let client_compress : ClientFlag

let client_found_rows : ClientFlag

let client_ignore_space : ClientFlag

let client_local_files : ClientFlag

let client_multi_results : ClientFlag

let client_multi_statements : ClientFlag

let client_no_schema : ClientFlag

fn connect_via_tcp_socket(host~ : String, port~ : UInt, user~ : String, password~ : String, database~ : String, client_flag? : UInt) -> MySql raise

fn connect_via_unix_socket(unix_socket~ : String, user~ : String, password~ : String, database~ : String, client_flag? : UInt) -> MySql raise

// Errors
pub suberror Err (String, UInt, String, SourceLoc)
fn Err::output(Self, &Logger) -> Unit // from trait `Show`
fn Err::to_string(Self) -> String // from trait `Show`
impl Show for Err

// Types and methods
type ClientFlag
fn ClientFlag::lor(Self, Self) -> Self // from trait `BitOr`
impl BitOr for ClientFlag

type MySql
fn MySql::affected_rows(Self) -> UInt
fn MySql::close(Self) -> Unit
fn MySql::execute(Self, String) -> QueryResult raise
#callsite(autofill(loc))
fn[T] MySql::fail(Self, String, loc~ : SourceLoc) -> T raise
fn MySql::real_escape_string(Self, String) -> String
fn MySql::set_character_set(Self, Bytes) -> Int

type QueryResult
fn QueryResult::fetch_row(Self) -> QueryResultRow?
fn QueryResult::free_result(Self) -> Unit
fn QueryResult::iter(Self) -> Iter[QueryResultRow]

type QueryResultRow
fn QueryResultRow::get(Self, Int) -> String?
#alias("_[_]")
fn QueryResultRow::unsafe_get(Self, Int) -> String

// Type aliases

// Traits

